{{- $clusterName := .Values.global.cluster.name }}
{{- $accountName := .Values.global.account.name }}
{{- range .Values.namespaces }}
{{- $ns := . }}
{{- $trustedGithubAccounts := list }}
{{- range $.Values.users }}
  {{- $user := . }}
  {{- range .roles }}
    {{- if eq .account $accountName }}
      {{- $trustedGithubAccounts = append $trustedGithubAccounts $user.github }}
    {{- end }}
  {{- end }}
{{- end }}
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny
  namespace: {{ .name }}
spec:
  podSelector: {}
  policyTypes:
  - Ingress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-allow-ingressgateway
  namespace: {{ .name }}
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          istio: ingressgateway
      namespaceSelector:
        matchLabels:
          namespace: istio-system
{{- if (default dict .ingress).enabled }}
    - podSelector:
        matchLabels:
          istio: {{ .name }}-ingressgateway
      namespaceSelector:
        matchLabels:
          namespace: {{ .name }}
{{- end }}
---
{{- if (default dict .ingress).enabled }}
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-ingress-to-ingressgateway
  namespace: {{ .name }}
spec:
  podSelector:
    matchLabels:
      istio: {{ .name }}-ingressgateway
  ingress:
  - from: []
---
apiVersion: cert-manager.io/v1alpha2
kind: Certificate
metadata:
  name: namespace-default
  namespace: {{ .name }}
spec:
  secretName: namespace-default-certificate
  dnsNames:
  - "{{ .name }}.{{ $.Values.global.cluster.domain }}"
  issuerRef:
    name: letsencrypt-r53
    kind: ClusterIssuer
---
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: namespace-default
  namespace: {{ .name }}
  annotations:
    externaldns.k8s.io/namespace: {{ .name }}
spec:
  selector:
    istio: {{ .name }}-ingressgateway
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    tls:
      httpsRedirect: true
    hosts:
    - "{{ .name }}.{{ $.Values.global.cluster.domain }}"
  - port:
      number: 443
      name: https
      protocol: HTTPS
    tls:
      mode: SIMPLE
      serverCertificate: sds
      privateKey: sds
      credentialName: namespace-default-certificate
    hosts:
    - "{{ .name }}.{{ $.Values.global.cluster.domain }}"
---
{{- end }}
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-allow-prometheus
  namespace: {{ .name }}
spec:
  podSelector: {}
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          namespace: gsp-system
      podSelector:
        matchLabels:
          app: prometheus
---
apiVersion: concourse.govsvc.uk/v1beta1
kind: Team
metadata:
  labels:
    controller-tools.k8s.io: "1.0"
  name: {{ trimPrefix (printf "%s-" $.Values.global.cluster.name) .name }}
  namespace: {{ .name }}
spec:
  roles:
  - name: owner
    local:
      users: ["pipeline-operator"]
  - name: pipeline-operator
    github:
      users: {{ (toJson (uniq $trustedGithubAccounts)) }}
---
apiVersion: v1
kind: Secret
metadata:
  name: trusted-developers
  namespace: {{ .name }}
data:
  github-accounts: {{ (toJson (uniq $trustedGithubAccounts)) | b64enc }}
---
apiVersion: v1
kind: Secret
metadata:
  name: cluster
  namespace: {{ .name }}
data:
  name: {{ $.Values.global.cluster.name | b64enc }}
  domain: {{ $.Values.global.cluster.domain | b64enc }}
  cloudHsmIp: {{ $.Values.global.cloudHsm.ip | b64enc }}
  releaseVersion: {{ $.Values.global.cluster.releaseVersion | b64enc }}
---
apiVersion: v1
kind: Secret
metadata:
  name: concourse
  namespace: {{ .name }}
data:
  github-resource-image: {{ $.Values.concourseResources.github.image.repository | b64enc }}
  github-resource-tag: {{ $.Values.concourseResources.github.image.tag | b64enc }}
  task-toolbox-image: {{ $.Values.concourseResources.task.image.repository | b64enc }}
  task-toolbox-tag: {{ $.Values.concourseResources.task.image.tag | b64enc }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: concourse
  namespace: {{ .name }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: {{ $.Release.Name }}-concourse-web
subjects:
- kind: ServiceAccount
  name: {{ $.Release.Name }}-concourse-web
  namespace: {{ $.Release.Namespace }}
---
apiVersion: v1
kind: Secret
metadata:
  name: github
  namespace: {{ .name }}
data:
  api-token: {{ $.Values.githubAPIToken | b64enc }}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: namespace-deployer
  namespace: {{ .name }}
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: namespace-deployer-auditor
  namespace: {{ .name }}
  labels:
    gsp-binding: namespace-deployer
subjects:
- kind: ServiceAccount
  name: namespace-deployer
  namespace: {{ .name }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: auditor
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: namespace-deployer-operator
  namespace: {{ .name }}
subjects:
- kind: ServiceAccount
  name: namespace-deployer
  namespace: {{ .name }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: operator
---
apiVersion: v1
kind: Secret
metadata:
  name: namespace-deployer
  namespace: {{ .name }}
  annotations:
    "kubernetes.io/service-account.name": namespace-deployer
type: kubernetes.io/service-account-token
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: operators
  namespace: {{ .name }}
subjects:
- kind: Group
  name: {{ .name }}-operators
  namespace: {{ .name }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: operator
{{- if .repository }}
---
apiVersion: concourse.govsvc.uk/v1beta1
kind: Pipeline
metadata:
  labels:
    controller-tools.k8s.io: "1.0"
  name: configure-namespace
  namespace: {{ .name }}
spec:
  exposed: true
  pipelineString: |
    resource_types:
    - name: github
      type: registry-image
      source:
        repository: {{ $.Values.concourseResources.github.image.repository }}
        tag: {{ $.Values.concourseResources.github.image.tag }}
    resources:
    - name: src
      type: {{ .configureNamespaceResourceType | default "github" }}
      icon: github-circle
      source:
        uri: "https://github.com/{{ .owner }}/{{ .repository }}.git"
        organization: {{ .owner }}
        branch: {{ .branch | default "master" | quote }}
        owner: {{ .owner }}
        repository: {{ .repository }}
        username: "re-autom8-ci"
        password: ((github.api-token))
        github_api_token: ((github.api-token))
        access_token: ((github.api-token))
        approvers: ((trusted-developers.github-accounts))
        required_approval_count: {{ required (printf "Missing requiredApprovalCount for namespace %s" .name) .requiredApprovalCount }}
        paths:
        - {{ .path | quote }}
    jobs:
    - name: apply
      serial: true
      plan:
      - get: src
        trigger: true
      - task: apply
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: {{ $.Values.concourseResources.task.image.repository | quote }}
              tag: {{ $.Values.concourseResources.task.image.tag | quote }}
          inputs:
          - name: src
          params:
            KUBERNETES_SERVICE_ACCOUNT: ((namespace-deployer))
            KUBERNETES_TOKEN: ((namespace-deployer.token))
            KUBERNETES_API: kubernetes.default.svc
            RELEASE_NAMESPACE: ((namespace-deployer.namespace))
            PATH_TO_MANIFESTS: {{ .path | quote }}
            SRC_URI: {{ .uri }}
            SCOPE: namespace
          run:
            path: /bin/bash
            args:
            - -eu
            - -c
            - |
              echo "this job will populate the namespace with kubeyaml found in repository ${SRC_URI} at path ${PATH_TO_MANIFESTS}..."
              echo "configuring kubectl..."

              setup-kube-deployer
              kubectl config set-context deployer --namespace "${RELEASE_NAMESPACE}"

              echo "applying manifests from ${SRC_URI} at path ${PATH_TO_MANIFESTS} to ${RELEASE_NAMESPACE}"
              kubectl apply -n ${RELEASE_NAMESPACE} -R -f "./src/${PATH_TO_MANIFESTS}"
---
{{- end }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: gsp-default-psp
  namespace: {{ .name }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: gsp-default-psp
subjects:
  - kind: Group
    apiGroup: rbac.authorization.k8s.io
    name: system:authenticated
---
apiVersion: v1
kind: Secret
metadata:
  name: dockerhubpull
  namespace: {{ .name }}
data:
  .dockerconfigjson: {{ $.Values.global.dockerHubCredentials }}
type: kubernetes.io/dockerconfigjson
---
apiVersion: v1
kind: Secret
metadata:
  name: dockerhubpull-concourse
  namespace: {{ .name }}
data:
  username: {{ $.Values.global.dockerHubUsername | b64enc }}
  password: {{ $.Values.global.dockerHubPassword | b64enc }}
{{- end }}
