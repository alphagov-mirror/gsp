{{- $allNamespaces := prepend (dict "name" "gsp-system" "ingress" (dict "enabled" true)) (datasource "config").namespaces }}
istio:
  gateways:
{{- range $namespace := $allNamespaces }}
{{- if (has $namespace "ingress") }}
{{- if (has $namespace.ingress "enabled") }}
{{- if $namespace.ingress.enabled }}
    {{ $namespace.name }}-ingressgateway:
      namespace: {{ $namespace.name }}
      enabled: true
      #
      # Secret Discovery Service (SDS) configuration for ingress gateway.
      #
      sds:
        # If true, ingress gateway fetches credentials from SDS server to handle TLS connections.
        enabled: false
        # SDS server that watches kubernetes secrets and provisions credentials to ingress gateway.
        # This server runs in the same pod as ingress gateway.
        image: node-agent-k8s
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 2000m
            memory: 1024Mi

      labels:
        app: istio-ingressgateway
        istio: {{ $namespace.name }}-ingressgateway
      autoscaleEnabled: true
      autoscaleMin: 1
      autoscaleMax: 5
      # specify replicaCount when autoscaleEnabled: false
      # replicaCount: 1
      resources:
        requests:
          cpu: 100m
          memory: 128Mi
        limits:
          cpu: 2000m
          memory: 1024Mi
      cpu:
        targetAverageUtilization: 80
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      externalIPs: []
      serviceAnnotations:
        service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
      podAnnotations: {}
      type: LoadBalancer #change to NodePort, ClusterIP or LoadBalancer if need be
      #externalTrafficPolicy: Local #change to Local to preserve source IP or Cluster for default behaviour or leave commented out
      ports:
        ## You can add custom gateway ports
        # Note that AWS ELB will by default perform health checks on the first port
        # on this list. Setting this to the health check port will ensure that health
        # checks always work. https://github.com/istio/istio/issues/12503
      - port: 15020
        targetPort: 15020
        name: status-port
      - port: 80
        targetPort: 80
        name: http2
      - port: 443
        name: https
        # This is the port where sni routing happens
      - port: 15443
        targetPort: 15443
        name: tls
{{- if has $namespace.ingress "ports" }}
{{ $namespace.ingress.ports | toYAML | strings.Indent 6 -}}
{{- end }}
      secretVolumes:
      - name: ingressgateway-certs
        secretName: istio-ingressgateway-certs
        mountPath: /etc/istio/ingressgateway-certs
      - name: ingressgateway-ca-certs
        secretName: istio-ingressgateway-ca-certs
        mountPath: /etc/istio/ingressgateway-ca-certs
      ### Advanced options ############

      # Ports to explicitly check for readiness. If configured, the readiness check will expect a
      # listener on these ports. A comma separated list is expected, such as "80,443".
      #
      # Warning: If you do not have a gateway configured for the ports provided, this check will always
      # fail. This is intended for use cases where you always expect to have a listener on the port,
      # such as 80 or 443 in typical setups.
      applicationPorts: ""

      env:
        # A gateway with this mode ensures that pilot generates an additional
        # set of clusters for internal services but without Istio mTLS, to
        # enable cross cluster routing.
        ISTIO_META_ROUTER_MODE: "sni-dnat"
      nodeSelector: {}

      # Specify the pod anti-affinity that allows you to constrain which nodes
      # your pod is eligible to be scheduled based on labels on pods that are
      # already running on the node rather than based on labels on nodes.
      # There are currently two types of anti-affinity:
      #    "requiredDuringSchedulingIgnoredDuringExecution"
      #    "preferredDuringSchedulingIgnoredDuringExecution"
      # which denote “hard” vs. “soft” requirements, you can define your values
      # in "podAntiAffinityLabelSelector" and "podAntiAffinityTermLabelSelector"
      # correspondingly.
      # For example:
      # podAntiAffinityLabelSelector:
      # - key: security
      #   operator: In
      #   values: S1,S2
      #   topologyKey: "kubernetes.io/hostname"
      # This pod anti-affinity rule says that the pod requires not to be scheduled
      # onto a node if that node is already running a pod with label having key
      # “security” and value “S1”.
      podAntiAffinityLabelSelector: []
      podAntiAffinityTermLabelSelector: []
{{- end }}
{{- end }}
{{- end }}
{{- if (has $namespace "egress") }}
{{- if (has $namespace.egress "enabled") }}
{{- if $namespace.egress.enabled }}
    {{ $namespace.name }}-egressgateway:
      enabled: true
      namespace: {{ $namespace.name }}
      labels:
        app: istio-egressgateway
        istio: {{ $namespace.name }}-egressgateway
      autoscaleEnabled: true
      autoscaleMin: 1
      autoscaleMax: 5
      # specify replicaCount when autoscaleEnabled: false
      # replicaCount: 1
      resources:
        requests:
          cpu: 100m
          memory: 128Mi
        limits:
          cpu: 2000m
          memory: 256Mi
      cpu:
        targetAverageUtilization: 80
      serviceAnnotations: {}
      podAnnotations: {}
      type: ClusterIP #change to NodePort or LoadBalancer if need be
      ports:
      - port: 80
        name: http2
      - port: 443
        name: https
        # This is the port where sni routing happens
      - port: 15443
        targetPort: 15443
        name: tls
{{- if has $namespace.egress "ports" }}
{{ $namespace.egress.ports | toYAML | strings.Indent 6 }}
{{- end }}
      secretVolumes:
      - name: egressgateway-certs
        secretName: istio-egressgateway-certs
        mountPath: /etc/istio/egressgateway-certs
      - name: egressgateway-ca-certs
        secretName: istio-egressgateway-ca-certs
        mountPath: /etc/istio/egressgateway-ca-certs
      #### Advanced options ########
      env:
        # Set this to "external" if and only if you want the egress gateway to
        # act as a transparent SNI gateway that routes mTLS/TLS traffic to
        # external services defined using service entries, where the service
        # entry has resolution set to DNS, has one or more endpoints with
        # network field set to "external". By default its set to "" so that
        # the egress gateway sees the same set of endpoints as the sidecars
        # preserving backward compatibility
        # ISTIO_META_REQUESTED_NETWORK_VIEW: ""
        # A gateway with this mode ensures that pilot generates an additional
        # set of clusters for internal services but without Istio mTLS, to
        # enable cross cluster routing.
        ISTIO_META_ROUTER_MODE: "sni-dnat"
      nodeSelector: {}

      # Specify the pod anti-affinity that allows you to constrain which nodes
      # your pod is eligible to be scheduled based on labels on pods that are
      # already running on the node rather than based on labels on nodes.
      # There are currently two types of anti-affinity:
      #    "requiredDuringSchedulingIgnoredDuringExecution"
      #    "preferredDuringSchedulingIgnoredDuringExecution"
      # which denote “hard” vs. “soft” requirements, you can define your values
      # in "podAntiAffinityLabelSelector" and "podAntiAffinityTermLabelSelector"
      # correspondingly.
      # For example:
      # podAntiAffinityLabelSelector:
      # - key: security
      #   operator: In
      #   values: S1,S2
      #   topologyKey: "kubernetes.io/hostname"
      # This pod anti-affinity rule says that the pod requires not to be scheduled
      # onto a node if that node is already running a pod with label having key
      # “security” and value “S1”.
      podAntiAffinityLabelSelector: []
      podAntiAffinityTermLabelSelector: []
{{- end }}
{{- end }}
{{- end }}
{{- end }}
